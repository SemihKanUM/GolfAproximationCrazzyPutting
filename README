# Intelligent Golf Bot ⛳🤖

This project implements an **autonomous bot** that computes the correct **velocity** and **angle** to shoot a ball into a hole in a single attempt — even in highly complex terrains.  

The bot uses two optimization strategies:  
- **Manhattan Algorithm** (custom fast optimization method)  
- **Newton–Raphson Algorithm** (numerical optimization method)  

Both approaches converge extremely fast and find precise launch parameters within **milliseconds**.

---

## 🚀 Features
- Calculates **one-shot solutions** for various terrains.
- Uses **ODE solvers** and custom physics engine for realistic simulation.
- Implements two distinct optimization methods:
  - **ManhattanBot.java** – heuristic-based optimization.
  - **NewtonBot.java** – gradient-based optimization using Newton–Raphson.
- Handles **complex terrains** such as:
  - Maze-like structures.
  - Surfaces with obstacles or small lakes.
- Extremely fast: solutions computed in **milliseconds**.

---

## 🖼️ Example Terrains
### Maze Terrain
![Maze Terrain](assets/Pre-made_terrains/Maze.png)

### Small Lake in the Center
![Small Lake](assets/Pre-made_terrains/SmallLakeInCenter.png)

---

## 📂 Project Structure
- `Ball.java` – Ball physics and properties.  
- `Goal.java` – Target hole representation.  
- `Physics.java` – Physics engine and motion dynamics.  
- `ODESolvers.java` – Numerical solvers for motion equations.  
- `Launch.java` – Handles initial launch parameters.  
- `ManhattanBot.java` – Custom Manhattan optimization bot.  
- `NewtonBot.java` – Newton–Raphson optimization bot.  

---

## 🛠️ Technologies Used
- **Java** (core implementation)  
- **Numerical Optimization** (Newton–Raphson)  
- **Custom Heuristic Optimization** (Manhattan)  
- **Physics Simulation & ODE Solvers**  

---

## 📌 Related Topics
- Artificial Intelligence in Games  
- Numerical Optimization  
- Physics Simulation  
- Computational Geometry  
- Robotics & Autonomous Agents  

---

## ▶️ Running the Project

Instructions for running the Crazy Putting Game:
    1. Navigate to the main.DesktopLauncher.java starting from the Project file
        - desktop\src\main\DesktopLauncher.java
    2. Run the DesktopLauncher class file.
    3. Press the "Play" button to start the game or press "Settings" to change the configurations

Controls:
    Camera (Relative to QWERTY button mappings):
        W       - Move camera forward
        A       - Move camera left
        S       - Move camera back
        D       - Move camera right
       (All directions are relative to camera perspective)

    Initial velocity and direction (Player mode only):
        UP      - Increase initial velocity
        DOWN    - Decrease initial velocity
        LEFT    - Rotate pointer counter-clockwise
        RIGHT   - Rotate pointer clockwise

    General:
        ENTER   - (Re)Start simulation

Remark: Please note that on macOS your application needs to be started with the -XstartOnFirstThread JVM argument, in order for LibGDX to work.
